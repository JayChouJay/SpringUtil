<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--引入外部数据库配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>
    <!--管理数据源-->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          p:driverClassName="${mysql.driver}"
          p:url="${mysql.url}"
          p:username="${mysql.username}"
          p:password="${mysql.password}"

          p:maxActive="${mysql.maxActive}"
          p:maxIdle="${mysql.maxIdle}"
          p:minIdle="${mysql.minIdle}"
          p:maxWait="${mysql.maxWait}"
    ></bean>
    <!--管理工厂-->
    <bean name="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:configLocation="classpath:mybatis.xml"
    ></bean>
    <!--告诉Spring框架，如果有人（service）想要maper包接口的代理类
        就是用指定sessionFactory创建sqlsession，
        通过mapper机制产生对应接口的代理类
    -->
    <bean name="mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer"
    p:sqlSessionFactoryBeanName="sessionFactory"
    p:basePackage="mapper"
    >

    </bean>
    <!--管理事务-->
    <bean name="manager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource">

    </bean>
    <!--manager的事务管理策略和切入点都由注解来配置，开启事务的注解编程-->
    <tx:annotation-driven transaction-manager="manager"></tx:annotation-driven>
</beans>
